#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/time.h>

#define file_name "data.bin"

typedef struct{
    char name[20];
    char color[20];
    char country[20];
    int count;
}flower;

void print(const char *f_name){// вывод в табличном виде из 8 ЛР)
    FILE *f=fopen(f_name, "rb");
    if(!f){
        printf("Ошибка открытия файла %s\n", f_name);
    return;}

    flower get_flower;
    puts("\n----------------------------------Таблица данных:----------------------------------");
    puts("№    |\t  Название\t    |\t   Цвет\t\t   |\t Страна           | Кол-во");
    
    int flag=1;
    fseek(f, 0, SEEK_END);
	long file_size = ftell(f);
    fseek(f, 0, SEEK_SET);
    if(file_size<sizeof(flower)){flag=0;puts("\n\t\t\t     Таблица  пуста");}

    fread(&get_flower, sizeof(flower), 1, f);
    for(int i=1; flag && (i*sizeof(flower)<=file_size); i++){
        printf("%4d | %-20s | %-20s | %-20s |  %3d\n",i,get_flower.name,get_flower.color,get_flower.country,get_flower.count);
        fread(&get_flower, sizeof(flower), 1, f);
        }
    fclose(f);
}

int comparator(flower struct_1,flower struct_2){//сравнивает структуры, возвращает : 1, если результат str1 > str2; 0, если = ; -1, если <
    int flag=-1;

    int cmp = strcmp(struct_1.name, struct_2.name);
    if (cmp > 0){//сравниваем названия
        flag=1;}
    
    else if(cmp == 0){//если они одинаковые, то сравниваем цвета

        cmp = strcmp(struct_1.color, struct_2.color);
        if (cmp > 0){
        flag=1;}

        else if(cmp == 0){//сравниваем страны

            cmp = strcmp(struct_1.country, struct_2.country);
            if (cmp > 0){
            flag=1;}

            else if(cmp == 0){//сравниваем количество
                if(struct_1.count > struct_2.count){
                    flag=1;
                }
                else if(struct_1.count == struct_2.count){
                    flag=0;
                }
            }
        }
    }
    return flag;
}

void choiceSort(flower * array, int len){//сортировка выбором

    for (int i = 0; i < len - 1; i++){//пе
        int min_i = i;
        
        for (int j = i + 1; j < len; j++){ // находим индекс минимального элемента
            if(comparator(array[j],array[min_i])==-1){
                min_i = j;
            }
        }
        flower temp = array[i];
        array[i] = array[min_i];//меняем значения местами
        array[min_i] = temp;
    }
}

void quickSort(flower *array, int first, int last){
    if (first < last){
        int left = first, right = last, middle = (left + right) / 2;
    do
    {
    while (comparator(array[left],array[middle])==-1) left++;
    while (comparator(array[right],array[middle])==1) right--;
    if (left <= right)
    {
    flower tmp = array[left];
    array[left] = array[right];
    array[right] = tmp;
    left++;
    right--;
    }

    } while (left <= right);
    quickSort(array, first, right);
    quickSort(array, left, last);
    }
}

void downHeap(flower *array, long k, long n)
{
	long child;
	flower new_elem = array[k];
	
	while(k <= n/2)
	{
		child = 2*k;
		if( child < n && comparator(array[child],array[child+1])==-1)
		{
			child++;
		}
		if( comparator(new_elem,array[child])!=-1)
		{
			break;
		}
		array[k] = array[child];
		k = child;
	}
	array[k] = new_elem;
}


void pyramidSort(flower *array, long size)
{
	long i;
	flower tmp;

	for(i = size/2; i >= 0; i--)
	{
		downHeap(array, i, size-1);
	}


	for(i = size-1; i > 0; i--)
	{
		tmp = array[i];
		array[i] = array[0];
		array[0] = tmp;
		downHeap(array, 0, i-1);
	}
}

int main(){
    FILE *f=fopen(file_name, "rb");//открываем файл для записи(если данные в файле есть, то они не стираются)
    if(!f){
        printf("Ошибка открытия файла %s\n", file_name);
        return 0;}

    fseek(f, 0, SEEK_END);
	long file_size = ftell(f);//получаем размер файла в Байтах
    fseek(f, 0, SEEK_SET);
    flower * array = (flower *) malloc(file_size);//создаем динамический массив, в котором будут храниться структуры
    int len = file_size/sizeof(flower);//определяем кол-во элементов в файле
    fread(array, sizeof(flower), len, f);
    fclose(f);

    int choice, flag;
    puts("\nВыберите алгоритм сортировки:\n1)Выбором \n2)Быстрая \n3)Пирамидальная");
    scanf("%d",&choice);
    struct timeval start, end;
    long long time;
    char f_name[20];
    switch (choice)
    {
    case 1:
        gettimeofday(&start, NULL);//время начала сортировки

        choiceSort(array,len);//ПОМЕНЯТЬ НА НОРМАЛЬНОЕ ОПРЕДЕЛЕНИЕ ДЛИНЫ  

        gettimeofday(&end, NULL);
        time = (end.tv_sec - start.tv_sec) * 1000000LL + (end.tv_usec - start.tv_usec);
        printf("\nВремя работы сортировки выбором: %lld мкс\n\n",time);

        strcpy(f_name,"choiceSort.bin");
        break;

    case 2:
        gettimeofday(&start, NULL);

        quickSort(array,0,len);//ПОМЕНЯТЬ НА НОРМАЛЬНОЕ ОПРЕДЕЛЕНИЕ ДЛИНЫ

        gettimeofday(&end, NULL);
        time = (end.tv_sec - start.tv_sec) * 1000000LL + (end.tv_usec - start.tv_usec);
        printf("\nВремя работы быстрой сортировки: %lld мкс\n\n",time);
        strcpy(f_name,"quickSort.bin");
        break;

    case 3:
        gettimeofday(&start, NULL);

        pyramidSort(array,len);

        gettimeofday(&end, NULL);
        time = (end.tv_sec - start.tv_sec) * 1000000LL + (end.tv_usec - start.tv_usec);
        printf("\nВремя работы пирамидальной сортировки: %lld мкс\n\n",time);
        strcpy(f_name,"pyramidSort.bin");
        break;

    default:
        puts("Сортировки с таким номером нет");
        break;
    }
    f=fopen(f_name, "wb");
    fwrite(array, sizeof(flower), len, f);//записываем отсортированную таблицу в отдельный файл
    fclose(f);
    
    puts("Введите 1, чтобы вывести отсортированную таблицу:");
    scanf("%d",&flag);
    if(flag==1){print(f_name);main();}
    free(array);
    if(flag==2){main();}
    return 0;
}